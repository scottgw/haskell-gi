
module GI.API
    ( API(..)
    , Named(..)
    , Constant(..)
    , Arg(..)
    , Callable(..)
    , Function(..)
    , Signal(..)
    , Property(..)
    , Field(..)
    , Struct(..)
    , Callback(..)
    , Interface(..)
    , Object(..)
    , Enumeration(..)
    , Flags (..)
    , Union (..)
    , loadAPI
    ) where

import Data.List (intercalate)
import Data.Word

import GI.Internal.Types
import GI.Internal.ArgInfo
import GI.Internal.BaseInfo
import GI.Internal.CallableInfo
import GI.Internal.ConstantInfo
import GI.Internal.EnumInfo
import GI.Internal.FieldInfo
import GI.Internal.FunctionInfo
import GI.Internal.InterfaceInfo
import GI.Internal.ObjectInfo
import GI.Internal.PropertyInfo
import GI.Internal.StructInfo
import GI.Internal.Typelib (getInfos, load)
import GI.Internal.UnionInfo
import GI.Type
import GI.Value

-- orphaned instances from autogenerated code
instance Show Direction where
    show DirectionIn = "in"
    show DirectionOut = "out"
    show DirectionInout = "in/out"

instance Show Scope where
    show ScopeTypeInvalid = "invalid"
    show ScopeTypeCall = "call"
    show ScopeTypeAsync = "async"
    show ScopeTypeNotified = "notified"

instance Show Transfer where
    show TransferNothing = "notrans"
    show TransferContainer = "contain"
    show TransferEverything = "everything"

shortScope ScopeTypeInvalid = ""
shortScope s = show s

shortTrans TransferNothing = ""
shortTrans t = show t

data Named a = Named { namespace :: String, name :: String, named :: a }

instance Show a => Show (Named a) where
    show (Named ns n a) = ns ++ "." ++ n ++ " " ++ show a

toNamed :: BaseInfoClass bi => bi -> a -> Named a
toNamed bi x =
   let namespace = baseInfoNamespace $ baseInfo bi
       name = baseInfoName $ baseInfo bi
    in Named namespace name x

data Constant = Constant {
    constValue :: Value }
    deriving Show

toConstant :: ConstantInfo -> Named Constant
toConstant ci =
    let typeInfo = constantInfoType ci
        arg = constantInfoValue ci
        value = fromArgument typeInfo arg
     in toNamed ci $ Constant value

data Enumeration = Enumeration {
    enumValues :: [(String, Word64)] }
    deriving Show

toEnumeration :: EnumInfo -> Named Enumeration
toEnumeration ei = toNamed ei $ Enumeration $
    (map (\vi -> (baseInfoName . baseInfo $ vi, valueInfoValue vi))
        (enumInfoValues ei))

data Flags = Flags Enumeration
    deriving Show

toFlags :: EnumInfo -> Named Flags
toFlags ei = let Named ns n x = toEnumeration ei
              in Named ns n (Flags x)

data Arg = Arg {
    argName ::String,
    argType :: Type,
    direction :: Direction,
    scope :: Scope,
    transfer :: Transfer }

instance Show Arg where
    show (Arg aName aType dir sc trans) =
        show dir ++ " " ++ aName ++ " :: " ++ show aType ++ 
        shortScope sc ++ " " ++ shortTrans trans

toArg :: ArgInfo -> Arg
toArg ai =
   Arg (baseInfoName . baseInfo $ ai)
        (typeFromTypeInfo . argInfoType $ ai)
        (argInfoDirection ai)
        (argInfoScope ai)
        (argInfoOwnershipTransfer ai)

data Callable = Callable {
    returnType :: Type,
    returnMayBeNull :: Bool,
    returnTransfer :: Transfer,
    returnAttributes :: [(String, String)],
    args :: [Arg] }

instance Show Callable where
    show (Callable retType mayNull trans attrs argus) =
        let nulMark = if mayNull then "?" else ""
            attrsStr = if null attrs then "" else show attrs
        in
          "(" ++ intercalate "," (map show argus) ++ ")" ++
          " :: " ++ show retType ++ nulMark ++ 
          "\n" ++ shortTrans trans ++ ", " ++ attrsStr
       
toCallable :: CallableInfo -> Named Callable
toCallable ci =
    let returnType = callableInfoReturnType ci
        argType = typeFromTypeInfo returnType
        ais = callableInfoArgs ci
        in toNamed ci $ Callable argType
               (callableInfoMayReturnNull ci)
               (callableInfoCallerOwns ci)
               (callableInfoReturnAttributes ci)
               (map toArg ais)

data Function = Function {
    fnSymbol :: String,
    fnFlags :: [FunctionInfoFlag],
    fnCallable :: Named Callable }

instance Show FunctionInfoFlag where
    show FunctionIsMethod = "method"
    show FunctionIsConstructor = "constructor"
    show _ = "SomeFuncInfo"

instance Show Function where
    show (Function symb flags callable) =
        "func " ++ symb ++ " " ++ show flags ++ " " ++ show callable

toFunction :: FunctionInfo -> Function
toFunction fi =
     let ci = fromBaseInfo (baseInfo fi) :: CallableInfo
      in Function (functionInfoSymbol fi) (functionInfoFlags fi) (toCallable ci)

data Signal = Signal
    deriving Show

toSignal :: SignalInfo -> Signal
toSignal _si = error "fixme"

data Property = Property {
    propName :: String,
    propType :: Type,
    propFlags :: [ParamFlag] }

instance Show Property where
    show (Property prName prType prFlags) =
        prName ++ " :: " ++ show prType ++ " " ++ show prFlags

toProperty :: PropertyInfo -> Property
toProperty pi =
    Property (baseInfoName $ baseInfo pi)
        (typeFromTypeInfo $ propertyInfoType pi)
        (propertyInfoFlags pi)

data Field = Field {
    fieldName :: String,
    fieldType :: Either Type Function,
    fieldFlags :: [FieldInfoFlag] }

instance Show Field where
    show (Field fName fType fFlags) =
        "field " ++ fName ++ " :: " ++ show fType ++ show fFlags

toField :: FieldInfo -> Field
toField fi =
    Field (baseInfoName . baseInfo $ fi)
          (either (Left . id) (Right . toFunction) (typeFromTypeInfoOrFunc $ fieldInfoType fi))
          (fieldInfoFlags fi)

data Struct = 
  Struct 
  { fields :: [Field]
  , structMethods :: [Function]
  }
  deriving Show

toStruct :: StructInfo -> Named Struct
toStruct si = toNamed si $ Struct (map toField $ structInfoFields si)
                                  (map toFunction $ structInfoMethods si)

-- XXX: Capture alignment and method info.

data Union = Union {
    unionFields :: [Field] }
    deriving Show

toUnion :: UnionInfo -> Named Union
toUnion ui =
    toNamed ui $ Union (map toField $ unionInfoFields ui)

data Callback = Callback (Named Callable)
    deriving Show

data Interface = Interface {
    ifMethods :: [Function],
    ifConstants :: [Named Constant],
    ifProperties :: [Property] }
    deriving Show

toInterface :: InterfaceInfo -> Named Interface
toInterface ii =
    toNamed ii $ Interface
        (map toFunction $ interfaceInfoMethods $ ii)
        (map toConstant $ interfaceInfoConstants $ ii)
        (map toProperty $ interfaceInfoProperties $ ii)

data Object = Object {
    objName :: String,
    objParent :: Maybe (Named Object),
    objFields :: [Field],
    objMethods :: [Function],
    -- objSignals :: [Signal],
    objProperties :: [Property] }

instance Show Object where
    show (Object name parent fields methods properties) =
        unlines $ 
          [name
          , maybe "" (\o -> " inherits " ++ objName (named o)) parent
          , "{"] ++ 
          map show fields ++
          map show methods ++ 
          map show properties ++
          ["}"]
                

toObject :: ObjectInfo -> Named Object
toObject oi =
    toNamed oi $ Object
        (objectInfoName oi)
        (fmap toObject $ objectInfoParent oi)
        (map toField $ objectInfoFields oi)
        (map toFunction $ objectInfoMethods oi)
        (map toProperty $ objectInfoProperties oi)

data API
    = APIConst (Named Constant)
    | APIFunction Function
    | APICallback Callback
    -- XXX: These plus APIUnion should have their gTypes exposed (via a
    -- binding of GIRegisteredTypeInfo.
    | APIEnum (Named Enumeration)
    | APIFlags (Named Flags)
    | APIInterface (Named Interface)
    | APIObject (Named Object)
    | APIStruct (Named Struct)
    | APIUnion (Named Union)

instance Show API where
    show (APIConst c) = show c
    show (APIFunction f) = show f
    show (APICallback cb) = show cb
    show (APIEnum e) = show e
    show (APIFlags f) = show f
    show (APIInterface i) = show i
    show (APIObject o) = show o
    show (APIStruct s) = show s
    show (APIUnion u) = show u

toAPI :: BaseInfoClass bi => bi -> API
toAPI i = toInfo' (baseInfoType i) (baseInfo i)
    where

    toInfo' InfoTypeConstant =
        APIConst . toConstant . fromBaseInfo
    toInfo' InfoTypeEnum =
        APIEnum . toEnumeration . fromBaseInfo
    toInfo' InfoTypeFlags =
        APIFlags . toFlags . fromBaseInfo
    toInfo' InfoTypeFunction =
        APIFunction . toFunction . fromBaseInfo
    toInfo' InfoTypeCallback =
        APICallback . Callback . toCallable . fromBaseInfo
    toInfo' InfoTypeStruct =
        APIStruct . toStruct . fromBaseInfo
    toInfo' InfoTypeUnion =
        APIUnion . toUnion . fromBaseInfo
    toInfo' InfoTypeObject =
        APIObject . toObject . fromBaseInfo
    toInfo' InfoTypeInterface =
        APIInterface . toInterface . fromBaseInfo
    toInfo' it = error $ "not expecting a " ++ show it

loadAPI :: String -> IO [API]
loadAPI name = do
    lib <- load name Nothing
    infos <- getInfos lib
    -- XXX: Work out what to do with boxed types.
    return $ map toAPI $ filter (\i -> baseInfoType i /= InfoTypeBoxed) infos

